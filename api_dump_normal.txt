Thread 0, Frame 0, Time 43 us:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 000000334CFFCC30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 000000334CFFCC00:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "RenderDoc Bug"
            applicationVersion:             uint32_t = 0
            pEngineName:                    const char* = ""
            engineVersion:                  uint32_t = 0
            apiVersion:                     uint32_t = 4202496
        enabledLayerCount:              uint32_t = 1
        ppEnabledLayerNames:            const char* const* = 000001FF2EB6EFA0
            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001FF304AE260
            ppEnabledExtensionNames[0]:     const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_KHR_win32_surface"
        pNext:                          VkDebugUtilsMessengerCreateInfoEXT = 000000334CFFD130:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
            pNext:                          const void* = NULL
            flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
            messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4352 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
            messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
            pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF676F83B10
            pUserData:                      void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001FF314C0620

Thread 0, Frame 0, Time 23050 us:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 000000334CFFCF80:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext:                          const void* = NULL
        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4352 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF676F83B10
        pUserData:                      void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMessenger:                     VkDebugUtilsMessengerEXT* = FD5B260000000001

Thread 0, Frame 0, Time 40510 us:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 000000334CFFD350:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)
        pNext:                          const void* = NULL
        flags:                          VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:                      HINSTANCE = 00007FF676F20000
        hwnd:                           HWND = 00000000000207B0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = FAB64D0000000002

Thread 0, Frame 0, Time 40635 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0, Time 40840 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001FF2EC0B120
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001FF31E05180

Thread 0, Frame 0, Time 41612 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0, Time 41800 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001FF2EC0B0C0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001FF31E05180

Thread 0, Frame 0, Time 41984 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0, Time 42140 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001FF2EC0AFB0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001FF31E05180

Thread 0, Frame 0, Time 42295 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0, Time 42459 us:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001FF314C0620
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001FF2EC0AD70
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001FF31E05180

Thread 0, Frame 0, Time 42644 us:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0, Time 42668 us:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001FF304AF9A0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001FF304AF9A0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001FF304AF9AC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001FF304AF9B8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001FF304AF9C4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0, Time 42733 us:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pProperties:                    VkPhysicalDeviceProperties* = 000000334CFFC3D0:
        apiVersion:                     uint32_t = 4202671
        driverVersion:                  uint32_t = 1985232896
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 4487
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce GTX 760"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000334CFFC4E4
            pipelineCacheUUID[0]:           uint8_t = 242
            pipelineCacheUUID[1]:           uint8_t = 174
            pipelineCacheUUID[2]:           uint8_t = 197
            pipelineCacheUUID[3]:           uint8_t = 153
            pipelineCacheUUID[4]:           uint8_t = 79
            pipelineCacheUUID[5]:           uint8_t = 81
            pipelineCacheUUID[6]:           uint8_t = 180
            pipelineCacheUUID[7]:           uint8_t = 3
            pipelineCacheUUID[8]:           uint8_t = 19
            pipelineCacheUUID[9]:           uint8_t = 164
            pipelineCacheUUID[10]:          uint8_t = 25
            pipelineCacheUUID[11]:          uint8_t = 114
            pipelineCacheUUID[12]:          uint8_t = 151
            pipelineCacheUUID[13]:          uint8_t = 21
            pipelineCacheUUID[14]:          uint8_t = 139
            pipelineCacheUUID[15]:          uint8_t = 63
        limits:                         VkPhysicalDeviceLimits = 000000334CFFC4F8:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 65536
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000334CFFC5D4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000334CFFC5E4
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000334CFFC610
                maxViewportDimensions[0]:       uint32_t = 16384
                maxViewportDimensions[1]:       uint32_t = 16384
            viewportBoundsRange:            float[2] = 000000334CFFC618
                viewportBoundsRange[0]:         float = -32768
                viewportBoundsRange[1]:         float = 32768
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 256
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000334CFFC6B4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000000334CFFC6BC
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000334CFFC6F0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 1
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0, Time 42956 us:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pFeatures:                      VkPhysicalDeviceFeatures* = 000000334CFFC2F0:
        robustBufferAccess:             VkBool32 = 1
        fullDrawIndexUint32:            VkBool32 = 1
        imageCubeArray:                 VkBool32 = 1
        independentBlend:               VkBool32 = 1
        geometryShader:                 VkBool32 = 1
        tessellationShader:             VkBool32 = 1
        sampleRateShading:              VkBool32 = 1
        dualSrcBlend:                   VkBool32 = 1
        logicOp:                        VkBool32 = 1
        multiDrawIndirect:              VkBool32 = 1
        drawIndirectFirstInstance:      VkBool32 = 1
        depthClamp:                     VkBool32 = 1
        depthBiasClamp:                 VkBool32 = 1
        fillModeNonSolid:               VkBool32 = 1
        depthBounds:                    VkBool32 = 1
        wideLines:                      VkBool32 = 1
        largePoints:                    VkBool32 = 1
        alphaToOne:                     VkBool32 = 1
        multiViewport:                  VkBool32 = 1
        samplerAnisotropy:              VkBool32 = 1
        textureCompressionETC2:         VkBool32 = 0
        textureCompressionASTC_LDR:     VkBool32 = 0
        textureCompressionBC:           VkBool32 = 1
        occlusionQueryPrecise:          VkBool32 = 1
        pipelineStatisticsQuery:        VkBool32 = 1
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics:       VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended:      VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample:  VkBool32 = 1
        shaderStorageImageReadWithoutFormat: VkBool32 = 0
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance:             VkBool32 = 1
        shaderCullDistance:             VkBool32 = 1
        shaderFloat64:                  VkBool32 = 1
        shaderInt64:                    VkBool32 = 1
        shaderInt16:                    VkBool32 = 1
        shaderResourceResidency:        VkBool32 = 0
        shaderResourceMinLod:           VkBool32 = 0
        sparseBinding:                  VkBool32 = 1
        sparseResidencyBuffer:          VkBool32 = 0
        sparseResidencyImage2D:         VkBool32 = 0
        sparseResidencyImage3D:         VkBool32 = 0
        sparseResidency2Samples:        VkBool32 = 0
        sparseResidency4Samples:        VkBool32 = 0
        sparseResidency8Samples:        VkBool32 = 0
        sparseResidency16Samples:       VkBool32 = 0
        sparseResidencyAliased:         VkBool32 = 0
        variableMultisampleRate:        VkBool32 = 1
        inheritedQueries:               VkBool32 = 1

Thread 0, Frame 0, Time 43014 us:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000000334CFFC708:
        memoryTypeCount:                uint32_t = 11
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000000334CFFC70C
            memoryTypes[0]:                 VkMemoryType = 000000334CFFC70C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000000334CFFC714:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[2]:                 VkMemoryType = 000000334CFFC71C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 000000334CFFC724:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000000334CFFC72C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000000334CFFC734:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[6]:                 VkMemoryType = 000000334CFFC73C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[7]:                 VkMemoryType = 000000334CFFC744:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 000000334CFFC74C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 000000334CFFC754:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[10]:                VkMemoryType = 000000334CFFC75C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000000334CFFC810
            memoryHeaps[0]:                 VkMemoryHeap = 000000334CFFC810:
                size:                           VkDeviceSize = 2104688640
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000000334CFFC820:
                size:                           VkDeviceSize = 8517394432
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0, Time 43530 us:
vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pFeatures:                      VkPhysicalDeviceFeatures2* = 000000334CFFC0A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext:                          void* = VkPhysicalDeviceBufferDeviceAddressFeatures
        features:                       VkPhysicalDeviceFeatures = 000000334CFFC0B0:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 1
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 1
            tessellationShader:             VkBool32 = 1
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 1
            logicOp:                        VkBool32 = 1
            multiDrawIndirect:              VkBool32 = 1
            drawIndirectFirstInstance:      VkBool32 = 1
            depthClamp:                     VkBool32 = 1
            depthBiasClamp:                 VkBool32 = 1
            fillModeNonSolid:               VkBool32 = 1
            depthBounds:                    VkBool32 = 1
            wideLines:                      VkBool32 = 1
            largePoints:                    VkBool32 = 1
            alphaToOne:                     VkBool32 = 1
            multiViewport:                  VkBool32 = 1
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 1
            occlusionQueryPrecise:          VkBool32 = 1
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended:      VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample:  VkBool32 = 1
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 1
            shaderFloat64:                  VkBool32 = 1
            shaderInt64:                    VkBool32 = 1
            shaderInt16:                    VkBool32 = 1
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 1
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 1
            inheritedQueries:               VkBool32 = 1
        pNext:                          VkPhysicalDeviceBufferDeviceAddressFeatures = 000001FF304B1060:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES (1000257000)
            pNext:                          void* = NULL
            bufferDeviceAddress:            VkBool32 = 1
            bufferDeviceAddressCaptureReplay: VkBool32 = 1
            bufferDeviceAddressMultiDevice: VkBool32 = 1

Thread 0, Frame 0, Time 43630 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0, Time 43677 us:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:            uint32_t* = 3
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0, Time 48056 us:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:            uint32_t* = 3
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001FF304B0FE0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001FF304B0FE0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001FF304B0FE8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001FF304B0FF0:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0, Time 49318 us:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0, Time 49344 us:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001FF304B0C60
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0, Time 50128 us:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pCreateInfo:                    const VkDeviceCreateInfo* = 000000334CFFC6B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 2
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 000001FF2EB6D1A0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 000001FF2EB6D1A0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 000001FF304AFA60
                    pQueuePriorities[0]:            const float = 1
            pQueueCreateInfos[1]:           const VkDeviceQueueCreateInfo = 000001FF2EB6D1C8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 1
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 000001FF304AFA80
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 000001FF2EB6EFA0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = NULL
        pNext:                          VkPhysicalDeviceFeatures2 = 000000334CFFD0D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
            pNext:                          void* = VkPhysicalDeviceBufferDeviceAddressFeatures
            features:                       VkPhysicalDeviceFeatures = 000000334CFFD0E0:
                robustBufferAccess:             VkBool32 = 0
                fullDrawIndexUint32:            VkBool32 = 0
                imageCubeArray:                 VkBool32 = 0
                independentBlend:               VkBool32 = 0
                geometryShader:                 VkBool32 = 0
                tessellationShader:             VkBool32 = 0
                sampleRateShading:              VkBool32 = 0
                dualSrcBlend:                   VkBool32 = 0
                logicOp:                        VkBool32 = 0
                multiDrawIndirect:              VkBool32 = 0
                drawIndirectFirstInstance:      VkBool32 = 0
                depthClamp:                     VkBool32 = 0
                depthBiasClamp:                 VkBool32 = 0
                fillModeNonSolid:               VkBool32 = 0
                depthBounds:                    VkBool32 = 0
                wideLines:                      VkBool32 = 0
                largePoints:                    VkBool32 = 0
                alphaToOne:                     VkBool32 = 0
                multiViewport:                  VkBool32 = 0
                samplerAnisotropy:              VkBool32 = 0
                textureCompressionETC2:         VkBool32 = 0
                textureCompressionASTC_LDR:     VkBool32 = 0
                textureCompressionBC:           VkBool32 = 0
                occlusionQueryPrecise:          VkBool32 = 0
                pipelineStatisticsQuery:        VkBool32 = 0
                vertexPipelineStoresAndAtomics: VkBool32 = 0
                fragmentStoresAndAtomics:       VkBool32 = 0
                shaderTessellationAndGeometryPointSize: VkBool32 = 0
                shaderImageGatherExtended:      VkBool32 = 0
                shaderStorageImageExtendedFormats: VkBool32 = 0
                shaderStorageImageMultisample:  VkBool32 = 0
                shaderStorageImageReadWithoutFormat: VkBool32 = 0
                shaderStorageImageWriteWithoutFormat: VkBool32 = 0
                shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
                shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
                shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
                shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
                shaderClipDistance:             VkBool32 = 0
                shaderCullDistance:             VkBool32 = 0
                shaderFloat64:                  VkBool32 = 0
                shaderInt64:                    VkBool32 = 0
                shaderInt16:                    VkBool32 = 0
                shaderResourceResidency:        VkBool32 = 0
                shaderResourceMinLod:           VkBool32 = 0
                sparseBinding:                  VkBool32 = 0
                sparseResidencyBuffer:          VkBool32 = 0
                sparseResidencyImage2D:         VkBool32 = 0
                sparseResidencyImage3D:         VkBool32 = 0
                sparseResidency2Samples:        VkBool32 = 0
                sparseResidency4Samples:        VkBool32 = 0
                sparseResidency8Samples:        VkBool32 = 0
                sparseResidency16Samples:       VkBool32 = 0
                sparseResidencyAliased:         VkBool32 = 0
                variableMultisampleRate:        VkBool32 = 0
                inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceBufferDeviceAddressFeatures = 000001FF304AFF40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES (1000257000)
            pNext:                          void* = NULL
            bufferDeviceAddress:            VkBool32 = 1
            bufferDeviceAddressCaptureReplay: VkBool32 = 1
            bufferDeviceAddressMultiDevice: VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001FF3229E7D8

Thread 0, Frame 0, Time 117060 us:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 000000334CFFC450:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 000000334CFFC478:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 000000334CFFC4B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 000000334CFFC4C0:
            maxExtent:                      VkExtent3D = 000000334CFFC4C0:
                width:                          uint32_t = 16384
                height:                         uint32_t = 16384
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 15
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 18446744073709551615
        pNext:                          VkExternalImageFormatProperties = 000000334CFFC490:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 000000334CFFC4A0:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0, Time 117175 us:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0, Time 117188 us:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000000334CFFC3D0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000000334CFFC3D0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000334CFFC3DC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000000334CFFC3E8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000334CFFC3F4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0, Time 117221 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 0, Time 117252 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 1
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF32187998

Thread 0, Frame 0, Time 118895 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0, Time 118933 us:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000334CFFCF30:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000334CFFCF38:
            width:                          uint32_t = 640
            height:                         uint32_t = 480
        minImageExtent:                 VkExtent2D = 000000334CFFCF40:
            width:                          uint32_t = 640
            height:                         uint32_t = 480
        maxImageExtent:                 VkExtent2D = 000000334CFFCF48:
            width:                          uint32_t = 640
            height:                         uint32_t = 480
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0, Time 118975 us:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:            uint32_t* = 3
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0, Time 120836 us:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:            uint32_t* = 3
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001FF304B0AC0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001FF304B0AC0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001FF304B0AC8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001FF304B0AD0:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0, Time 122079 us:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0, Time 122096 us:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001FF304B0DA0
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0, Time 122129 us:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 000000334CFFCFB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = FAB64D0000000002
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 000000334CFFCFDC:
            width:                          uint32_t = 640
            height:                         uint32_t = 480
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0000000000000000
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = FA21A40000000003

Thread 0, Frame 0, Time 204122 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0, Time 204157 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001FF2EBEA078
        pSwapchainImages[0]:            VkImage = F56C9B0000000004
        pSwapchainImages[1]:            VkImage = E7F79A0000000005
        pSwapchainImages[2]:            VkImage = F443490000000006

Thread 0, Frame 0, Time 204226 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0, Time 204243 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001FF304B0F40
        pSwapchainImages[0]:            VkImage = F56C9B0000000004
        pSwapchainImages[1]:            VkImage = E7F79A0000000005
        pSwapchainImages[2]:            VkImage = F443490000000006

Thread 0, Frame 0, Time 204266 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0, Time 204278 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001FF304B0D60
        pSwapchainImages[0]:            VkImage = F56C9B0000000004
        pSwapchainImages[1]:            VkImage = E7F79A0000000005
        pSwapchainImages[2]:            VkImage = F443490000000006

Thread 0, Frame 0, Time 204300 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0, Time 204312 us:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001FF304B0F00
        pSwapchainImages[0]:            VkImage = F56C9B0000000004
        pSwapchainImages[1]:            VkImage = E7F79A0000000005
        pSwapchainImages[2]:            VkImage = F443490000000006

Thread 0, Frame 0, Time 204333 us:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000334CFFD270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = F56C9B0000000004
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000334CFFD298:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000334CFFD2A8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 000000334CFFD2E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = CB3EE80000000007

Thread 0, Frame 0, Time 204440 us:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000334CFFD270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = E7F79A0000000005
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000334CFFD298:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000334CFFD2A8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 000000334CFFD2E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = EAD9370000000008

Thread 0, Frame 0, Time 204484 us:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000334CFFD270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = F443490000000006
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000334CFFD298:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000334CFFD2A8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 000000334CFFD2E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = EE647E0000000009

Thread 0, Frame 0, Time 204532 us:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 000000334CFFD440:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = CFEF35000000000A

Thread 0, Frame 0, Time 204615 us:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkFenceCreateInfo* = 000000334CFFD420:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = EC4BEC000000000B

Thread 0, Frame 0, Time 204658 us:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000334CFFD400:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = E88693000000000C

Thread 0, Frame 0, Time 204710 us:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pProperties:                    VkPhysicalDeviceProperties* = 000001FF304B63F8:
        apiVersion:                     uint32_t = 4202671
        driverVersion:                  uint32_t = 1985232896
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 4487
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce GTX 760"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001FF304B650C
            pipelineCacheUUID[0]:           uint8_t = 242
            pipelineCacheUUID[1]:           uint8_t = 174
            pipelineCacheUUID[2]:           uint8_t = 197
            pipelineCacheUUID[3]:           uint8_t = 153
            pipelineCacheUUID[4]:           uint8_t = 79
            pipelineCacheUUID[5]:           uint8_t = 81
            pipelineCacheUUID[6]:           uint8_t = 180
            pipelineCacheUUID[7]:           uint8_t = 3
            pipelineCacheUUID[8]:           uint8_t = 19
            pipelineCacheUUID[9]:           uint8_t = 164
            pipelineCacheUUID[10]:          uint8_t = 25
            pipelineCacheUUID[11]:          uint8_t = 114
            pipelineCacheUUID[12]:          uint8_t = 151
            pipelineCacheUUID[13]:          uint8_t = 21
            pipelineCacheUUID[14]:          uint8_t = 139
            pipelineCacheUUID[15]:          uint8_t = 63
        limits:                         VkPhysicalDeviceLimits = 000001FF304B6520:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 65536
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001FF304B65FC
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000001FF304B660C
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001FF304B6638
                maxViewportDimensions[0]:       uint32_t = 16384
                maxViewportDimensions[1]:       uint32_t = 16384
            viewportBoundsRange:            float[2] = 000001FF304B6640
                viewportBoundsRange[0]:         float = -32768
                viewportBoundsRange[1]:         float = 32768
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 256
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001FF304B66DC
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001FF304B66E4
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001FF304B6718:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 1
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0, Time 204890 us:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000001FF304B6730:
        memoryTypeCount:                uint32_t = 11
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000001FF304B6734
            memoryTypes[0]:                 VkMemoryType = 000001FF304B6734:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000001FF304B673C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[2]:                 VkMemoryType = 000001FF304B6744:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 000001FF304B674C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000001FF304B6754:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000001FF304B675C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[6]:                 VkMemoryType = 000001FF304B6764:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[7]:                 VkMemoryType = 000001FF304B676C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 000001FF304B6774:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 000001FF304B677C:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[10]:                VkMemoryType = 000001FF304B6784:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000001FF304B6838
            memoryHeaps[0]:                 VkMemoryHeap = 000001FF304B6838:
                size:                           VkDeviceSize = 2104688640
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000001FF304B6848:
                size:                           VkDeviceSize = 8517394432
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0, Time 204963 us:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pCreateInfo:                    const VkImageCreateInfo* = 000000334CFFF860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8_UINT (13)
        extent:                         VkExtent3D = 000000334CFFF87C:
            width:                          uint32_t = 1
            height:                         uint32_t = 1
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = CAD092000000000D

Thread 0, Frame 0, Time 205080 us:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 000000334CFFF720:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = CAD092000000000D
    pMemoryRequirements:            VkMemoryRequirements2* = 000000334CFFF6D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000334CFFF6E0:
            size:                           VkDeviceSize = 512
            alignment:                      VkDeviceSize = 65536
            memoryTypeBits:                 uint32_t = 258
        pNext:                          VkMemoryDedicatedRequirements = 000000334CFFF700:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0, Time 205137 us:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000334CFFF330:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = VkMemoryAllocateFlagsInfo
        allocationSize:                 VkDeviceSize = 33554432
        memoryTypeIndex:                uint32_t = 8
        pNext:                          VkMemoryAllocateFlagsInfo = 000000334CFFF310:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)
            pNext:                          const void* = NULL
            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
            deviceMask:                     uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 967DD1000000000E

Thread 0, Frame 0, Time 205755 us:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    image:                          VkImage = CAD092000000000D
    memory:                         VkDeviceMemory = 967DD1000000000E
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0, Time 210051 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0, Time 210137 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 0, Time 210198 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 0, Time 210215 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0, Time 210242 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B119B8

Thread 0, Frame 0, Time 210336 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B119B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0, Time 210382 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B119B8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0, Time 210876 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B119B8

Thread 0, Frame 0, Time 210910 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 0, Time 210945 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B119B8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 0, Time 211241 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0, Time 211265 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 0, Time 212068 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 1, Time 212220 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 1, Time 212243 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 1, Time 212269 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 1, Time 212284 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 1, Time 212307 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B2ADA8

Thread 0, Frame 1, Time 212346 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2ADA8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 1, Time 212369 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B2ADA8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 1, Time 212429 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2ADA8

Thread 0, Frame 1, Time 212441 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 1, Time 212455 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B2ADA8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 1, Time 212522 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 1, Time 212541 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 1, Time 219083 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 2, Time 219279 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 2, Time 219302 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 2, Time 219332 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 2, Time 219347 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 2, Time 219375 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B2C598

Thread 0, Frame 2, Time 219426 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2C598
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 2, Time 219446 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B2C598
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 2, Time 219509 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2C598

Thread 0, Frame 2, Time 219522 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 2, Time 219540 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B2C598
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 2, Time 219626 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 2, Time 219646 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 2, Time 235830 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 3, Time 237091 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 3, Time 237144 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 3, Time 237193 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 3, Time 237234 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 3, Time 237281 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B2DD88

Thread 0, Frame 3, Time 237345 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2DD88
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 3, Time 237378 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B2DD88
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 3, Time 237494 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2DD88

Thread 0, Frame 3, Time 237521 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 3, Time 237549 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B2DD88
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 3, Time 237674 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 3, Time 237705 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 3, Time 252550 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 4, Time 252776 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 4, Time 252811 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 4, Time 252841 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 4, Time 252857 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 4, Time 252887 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B2F718

Thread 0, Frame 4, Time 252933 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2F718
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 4, Time 252953 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B2F718
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 4, Time 253019 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B2F718

Thread 0, Frame 4, Time 253034 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 4, Time 253050 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B2F718
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 4, Time 253133 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 4, Time 253153 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 4, Time 269174 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 5, Time 269726 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 5, Time 269756 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 5, Time 269786 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 5, Time 269801 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 5, Time 269839 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B310A8

Thread 0, Frame 5, Time 269886 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B310A8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 5, Time 269906 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B310A8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 5, Time 269979 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B310A8

Thread 0, Frame 5, Time 269993 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 5, Time 270009 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B310A8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 5, Time 270094 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 5, Time 270115 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 5, Time 285817 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 6, Time 286457 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 6, Time 286486 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 6, Time 286517 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 6, Time 286533 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 6, Time 286565 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B35CB8

Thread 0, Frame 6, Time 286615 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B35CB8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 6, Time 286639 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B35CB8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 6, Time 286704 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B35CB8

Thread 0, Frame 6, Time 286717 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 6, Time 286733 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B35CB8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 6, Time 286817 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 6, Time 286838 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 6, Time 302501 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 7, Time 302657 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 7, Time 302683 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 7, Time 302713 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 7, Time 302728 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 7, Time 302768 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B394B8

Thread 0, Frame 7, Time 302814 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B394B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 7, Time 302834 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B394B8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 7, Time 302900 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B394B8

Thread 0, Frame 7, Time 302913 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 7, Time 302932 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B394B8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 7, Time 303015 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 7, Time 303035 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 7, Time 319230 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 8, Time 319400 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 8, Time 319427 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 8, Time 319463 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 8, Time 319483 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 8, Time 319518 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B3E728

Thread 0, Frame 8, Time 319568 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3E728
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 8, Time 319588 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B3E728
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 8, Time 319655 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3E728

Thread 0, Frame 8, Time 319670 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 8, Time 319686 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B3E728
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 8, Time 319770 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 8, Time 319790 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 8, Time 335813 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 9, Time 335959 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 9, Time 335988 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 9, Time 336017 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 9, Time 336033 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 9, Time 336071 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B3F628

Thread 0, Frame 9, Time 336116 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F628
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 9, Time 336135 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F628
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 9, Time 336205 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F628

Thread 0, Frame 9, Time 336220 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 9, Time 336236 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B3F628
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 9, Time 336323 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 9, Time 336342 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 9, Time 352524 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 10, Time 352670 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 10, Time 352700 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 10, Time 352731 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 10, Time 352746 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 10, Time 352781 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B3F918

Thread 0, Frame 10, Time 352825 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F918
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 10, Time 352847 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F918
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 10, Time 352914 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3F918

Thread 0, Frame 10, Time 352927 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 10, Time 352943 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B3F918
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 10, Time 353026 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 10, Time 353049 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 10, Time 369232 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 11, Time 369372 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 11, Time 369398 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 11, Time 369429 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 11, Time 369445 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 11, Time 369481 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B3FC08

Thread 0, Frame 11, Time 369524 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3FC08
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 11, Time 369548 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B3FC08
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 11, Time 369615 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3FC08

Thread 0, Frame 11, Time 369628 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 11, Time 369644 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B3FC08
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 11, Time 369730 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 11, Time 369751 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 11, Time 385836 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 12, Time 385977 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 12, Time 386003 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 12, Time 386033 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 12, Time 386048 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 12, Time 386131 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B404D8

Thread 0, Frame 12, Time 386181 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B404D8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 12, Time 386201 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B404D8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 12, Time 386267 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B404D8

Thread 0, Frame 12, Time 386283 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 12, Time 386302 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B404D8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 12, Time 386381 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 12, Time 386400 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 12, Time 402521 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 13, Time 402665 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 13, Time 402690 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 13, Time 402723 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 13, Time 402742 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 13, Time 402781 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B3ED58

Thread 0, Frame 13, Time 402829 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3ED58
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 13, Time 402849 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B3ED58
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 13, Time 402920 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B3ED58

Thread 0, Frame 13, Time 402935 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 13, Time 402950 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B3ED58
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 13, Time 403033 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 13, Time 403052 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 13, Time 419095 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 14, Time 419200 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 14, Time 419227 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 14, Time 419251 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 14, Time 419266 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 14, Time 419292 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4AFA8

Thread 0, Frame 14, Time 419328 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4AFA8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 14, Time 419345 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4AFA8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 14, Time 419398 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4AFA8

Thread 0, Frame 14, Time 419411 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 14, Time 419425 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4AFA8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 14, Time 419491 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 14, Time 419508 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 14, Time 435767 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 15, Time 435875 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 15, Time 435900 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 15, Time 435925 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 15, Time 435940 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 15, Time 435970 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4D8C8

Thread 0, Frame 15, Time 436001 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4D8C8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 15, Time 436022 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4D8C8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 15, Time 436108 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4D8C8

Thread 0, Frame 15, Time 436125 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 15, Time 436140 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4D8C8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 15, Time 436210 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 15, Time 436230 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 15, Time 452573 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 16, Time 452716 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 16, Time 452743 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 16, Time 452772 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 16, Time 452787 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 16, Time 452829 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4DBB8

Thread 0, Frame 16, Time 452879 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DBB8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 16, Time 452902 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DBB8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 16, Time 452969 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DBB8

Thread 0, Frame 16, Time 452983 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 16, Time 452999 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4DBB8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 16, Time 453082 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 16, Time 453102 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 16, Time 469228 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 17, Time 469374 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 17, Time 469400 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 17, Time 469429 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 17, Time 469449 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 17, Time 469495 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4B588

Thread 0, Frame 17, Time 469544 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4B588
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 17, Time 469567 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4B588
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 17, Time 469634 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4B588

Thread 0, Frame 17, Time 469649 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 17, Time 469665 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4B588
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 17, Time 469747 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 17, Time 469767 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 17, Time 485895 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 18, Time 486038 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 18, Time 486068 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 18, Time 486101 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 18, Time 486117 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 18, Time 486157 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4DEA8

Thread 0, Frame 18, Time 486200 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DEA8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 18, Time 486220 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DEA8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 18, Time 486293 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4DEA8

Thread 0, Frame 18, Time 486308 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 18, Time 486324 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4DEA8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 18, Time 486405 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 18, Time 486425 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 18, Time 502557 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 19, Time 502705 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 19, Time 502735 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 19, Time 502764 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 19, Time 502780 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 19, Time 502823 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4ACB8

Thread 0, Frame 19, Time 502862 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4ACB8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 19, Time 502882 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4ACB8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 19, Time 503020 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4ACB8

Thread 0, Frame 19, Time 503036 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 19, Time 503053 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4ACB8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 19, Time 503137 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 19, Time 503157 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 19, Time 519231 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 20, Time 519425 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 20, Time 519453 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 20, Time 519484 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 20, Time 519499 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 20, Time 519543 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4BB68

Thread 0, Frame 20, Time 519589 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4BB68
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 20, Time 519613 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4BB68
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 20, Time 519678 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4BB68

Thread 0, Frame 20, Time 519691 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 20, Time 519707 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4BB68
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 20, Time 519791 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 20, Time 519811 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 20, Time 535838 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 21, Time 535977 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 21, Time 536003 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 21, Time 536032 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 21, Time 536047 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 21, Time 536091 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4C148

Thread 0, Frame 21, Time 536145 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4C148
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 21, Time 536166 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4C148
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 21, Time 536231 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4C148

Thread 0, Frame 21, Time 536244 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 21, Time 536260 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4C148
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 21, Time 536345 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 21, Time 536364 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 21, Time 552501 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 22, Time 552640 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 22, Time 552665 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 22, Time 552695 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 22, Time 552716 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 22, Time 552760 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4CD08

Thread 0, Frame 22, Time 552798 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CD08
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 22, Time 552817 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CD08
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 22, Time 552884 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CD08

Thread 0, Frame 22, Time 552897 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 22, Time 552914 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4CD08
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 22, Time 552998 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 22, Time 553018 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 22, Time 569197 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 23, Time 569340 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 23, Time 569370 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 23, Time 569403 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 23, Time 569419 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 23, Time 569465 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B4CA18

Thread 0, Frame 23, Time 569509 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CA18
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 23, Time 569529 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CA18
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 23, Time 569596 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B4CA18

Thread 0, Frame 23, Time 569611 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 23, Time 569627 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B4CA18
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 23, Time 569708 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 23, Time 569728 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 23, Time 585815 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 24, Time 585958 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 24, Time 585987 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 24, Time 586016 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 24, Time 586032 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 24, Time 586079 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B67758

Thread 0, Frame 24, Time 586128 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67758
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 24, Time 586148 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B67758
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 24, Time 586226 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67758

Thread 0, Frame 24, Time 586240 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 24, Time 586256 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B67758
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 24, Time 586339 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 24, Time 586360 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 24, Time 602532 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 25, Time 602676 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 25, Time 602701 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 25, Time 602731 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 25, Time 602747 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 25, Time 602795 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B691C8

Thread 0, Frame 25, Time 602838 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B691C8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 25, Time 602867 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B691C8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 25, Time 602951 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B691C8

Thread 0, Frame 25, Time 602964 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 25, Time 602981 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B691C8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 25, Time 603062 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 25, Time 603083 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 25, Time 619228 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 26, Time 619372 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 26, Time 619398 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 26, Time 619427 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 26, Time 619442 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 26, Time 619490 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B68028

Thread 0, Frame 26, Time 619537 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B68028
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 26, Time 619557 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B68028
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 26, Time 619623 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B68028

Thread 0, Frame 26, Time 619636 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 26, Time 619690 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B68028
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 26, Time 619777 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 26, Time 619796 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 26, Time 635850 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 27, Time 635994 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 27, Time 636020 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 27, Time 636049 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 27, Time 636073 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 27, Time 636121 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B67D38

Thread 0, Frame 27, Time 636163 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67D38
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 27, Time 636183 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B67D38
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 27, Time 636249 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67D38

Thread 0, Frame 27, Time 636264 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 27, Time 636280 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B67D38
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 27, Time 636382 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 27, Time 636402 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 27, Time 652520 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 28, Time 652661 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 28, Time 652695 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 28, Time 652724 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 28, Time 652740 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 28, Time 652797 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B68318

Thread 0, Frame 28, Time 652834 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B68318
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 28, Time 652854 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B68318
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 28, Time 652921 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B68318

Thread 0, Frame 28, Time 652936 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 28, Time 652952 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B68318
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 28, Time 653065 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 28, Time 653084 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 28, Time 669234 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 29, Time 669382 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 29, Time 669411 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 29, Time 669440 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 29, Time 669455 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 29, Time 669506 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B688F8

Thread 0, Frame 29, Time 669548 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B688F8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 29, Time 669567 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B688F8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 29, Time 669637 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B688F8

Thread 0, Frame 29, Time 669650 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 29, Time 669666 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B688F8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 29, Time 669749 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 29, Time 669771 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 29, Time 685825 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 30, Time 685966 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 30, Time 685991 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 30, Time 686021 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 30, Time 686037 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 30, Time 686088 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B69D88

Thread 0, Frame 30, Time 686130 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B69D88
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 30, Time 686154 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B69D88
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 30, Time 686220 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B69D88

Thread 0, Frame 30, Time 686233 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 30, Time 686249 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B69D88
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 30, Time 686336 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 30, Time 686357 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 30, Time 702588 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 31, Time 702729 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 31, Time 702755 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 31, Time 702784 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 31, Time 702799 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 31, Time 702856 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B67468

Thread 0, Frame 31, Time 702899 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67468
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 31, Time 702919 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B67468
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 31, Time 702986 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67468

Thread 0, Frame 31, Time 702999 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 31, Time 703018 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B67468
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 31, Time 703102 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 31, Time 703121 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 31, Time 719196 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 32, Time 719347 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 32, Time 719375 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 32, Time 719411 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 32, Time 719431 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 32, Time 719485 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B69A98

Thread 0, Frame 32, Time 719524 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B69A98
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 32, Time 719543 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B69A98
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 32, Time 719611 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B69A98

Thread 0, Frame 32, Time 719625 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 32, Time 719641 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B69A98
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 32, Time 719723 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 32, Time 719743 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 32, Time 735834 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 33, Time 735978 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 33, Time 736007 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 33, Time 736036 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 33, Time 736051 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 33, Time 736109 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B665B8

Thread 0, Frame 33, Time 736168 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B665B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 33, Time 736188 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B665B8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 33, Time 736254 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B665B8

Thread 0, Frame 33, Time 736269 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 33, Time 736285 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B665B8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 33, Time 736399 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 33, Time 736418 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 33, Time 752496 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 34, Time 752673 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 34, Time 752702 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 34, Time 752732 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 34, Time 752751 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 34, Time 752825 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B67178

Thread 0, Frame 34, Time 752873 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67178
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 34, Time 752895 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B67178
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 34, Time 752963 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B67178

Thread 0, Frame 34, Time 752976 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 34, Time 752992 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B67178
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 34, Time 753074 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 34, Time 753097 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 34, Time 769228 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 35, Time 769816 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 35, Time 769842 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 35, Time 769872 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 35, Time 769888 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 35, Time 769942 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B43AD8

Thread 0, Frame 35, Time 770002 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B43AD8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 35, Time 770025 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B43AD8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 35, Time 770090 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B43AD8

Thread 0, Frame 35, Time 770103 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 35, Time 770119 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B43AD8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 35, Time 770201 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 35, Time 770222 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 35, Time 785828 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 36, Time 786504 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 36, Time 786530 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 36, Time 786560 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 36, Time 786579 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 36, Time 786638 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B42358

Thread 0, Frame 36, Time 786676 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42358
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 36, Time 786695 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B42358
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 36, Time 786759 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42358

Thread 0, Frame 36, Time 786775 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 36, Time 786791 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B42358
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 36, Time 786872 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 36, Time 786891 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 36, Time 802501 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 37, Time 803158 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 37, Time 803194 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 37, Time 803240 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 37, Time 803256 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 37, Time 803312 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B42938

Thread 0, Frame 37, Time 803366 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42938
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 37, Time 803386 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B42938
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 37, Time 803453 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42938

Thread 0, Frame 37, Time 803468 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 37, Time 803484 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B42938
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 37, Time 803565 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 37, Time 803584 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 37, Time 819219 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 38, Time 819855 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 38, Time 819886 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 38, Time 819915 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 38, Time 819930 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 38, Time 819984 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B42F18

Thread 0, Frame 38, Time 820020 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42F18
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 38, Time 820039 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B42F18
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 38, Time 820126 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B42F18

Thread 0, Frame 38, Time 820141 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 38, Time 820157 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B42F18
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 38, Time 820237 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 38, Time 820256 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 38, Time 835833 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 39, Time 836454 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 39, Time 836480 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 39, Time 836509 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 39, Time 836525 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 39, Time 836584 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B437E8

Thread 0, Frame 39, Time 836638 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B437E8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 39, Time 836662 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B437E8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 39, Time 836727 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B437E8

Thread 0, Frame 39, Time 836740 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 39, Time 836756 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B437E8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 39, Time 836837 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 39, Time 836857 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 39, Time 852517 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 40, Time 853144 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 40, Time 853170 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 40, Time 853200 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 40, Time 853215 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 40, Time 853272 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B86528

Thread 0, Frame 40, Time 853314 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86528
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 40, Time 853337 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B86528
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 40, Time 853491 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86528

Thread 0, Frame 40, Time 853505 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 40, Time 853522 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B86528
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 40, Time 853606 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 40, Time 853627 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 40, Time 869201 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 41, Time 869857 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 41, Time 869882 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 41, Time 869912 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 41, Time 869968 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 41, Time 870031 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B86B08

Thread 0, Frame 41, Time 870085 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86B08
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 41, Time 870104 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B86B08
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 41, Time 870173 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86B08

Thread 0, Frame 41, Time 870187 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 41, Time 870203 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B86B08
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 41, Time 870294 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 41, Time 870314 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 41, Time 885828 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 42, Time 886495 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 42, Time 886527 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 42, Time 886560 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 42, Time 886575 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 42, Time 886633 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B85098

Thread 0, Frame 42, Time 886686 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85098
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 42, Time 886705 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B85098
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 42, Time 886770 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85098

Thread 0, Frame 42, Time 886785 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 42, Time 886800 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B85098
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 42, Time 886881 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 42, Time 886900 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 42, Time 902508 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 43, Time 903178 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 43, Time 903208 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 43, Time 903240 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 43, Time 903256 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 43, Time 903319 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B88288

Thread 0, Frame 43, Time 903367 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B88288
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 43, Time 903386 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B88288
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 43, Time 903454 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B88288

Thread 0, Frame 43, Time 903469 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 43, Time 903485 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B88288
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 43, Time 903572 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 43, Time 903591 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 43, Time 919222 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 44, Time 920214 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 44, Time 920242 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 44, Time 920272 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 44, Time 920287 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 44, Time 920348 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B85F48

Thread 0, Frame 44, Time 920385 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85F48
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 44, Time 920409 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B85F48
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 44, Time 920479 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85F48

Thread 0, Frame 44, Time 920493 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 44, Time 920514 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B85F48
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 44, Time 920611 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 44, Time 920632 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 44, Time 935836 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 45, Time 936486 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 45, Time 936512 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 45, Time 936542 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 45, Time 936557 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 45, Time 936618 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B86238

Thread 0, Frame 45, Time 936658 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86238
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 45, Time 936682 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B86238
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 45, Time 936744 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B86238

Thread 0, Frame 45, Time 936758 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 45, Time 936775 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B86238
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 45, Time 936856 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 45, Time 936875 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 45, Time 952595 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 46, Time 953308 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 46, Time 953334 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 46, Time 953363 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 46, Time 953383 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 46, Time 953452 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B876C8

Thread 0, Frame 46, Time 953489 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B876C8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 46, Time 953508 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B876C8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 46, Time 953582 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B876C8

Thread 0, Frame 46, Time 953596 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 46, Time 953612 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B876C8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 46, Time 953693 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 46, Time 953712 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 46, Time 969185 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 47, Time 969832 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 47, Time 969862 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 47, Time 969894 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 47, Time 969910 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 47, Time 969974 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B85968

Thread 0, Frame 47, Time 970037 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85968
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 47, Time 970057 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B85968
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 47, Time 970125 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B85968

Thread 0, Frame 47, Time 970140 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 47, Time 970156 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B85968
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 47, Time 970286 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 47, Time 970305 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 47, Time 985827 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 48, Time 986427 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 48, Time 986456 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 48, Time 986486 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 48, Time 986502 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 48, Time 986565 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B84AB8

Thread 0, Frame 48, Time 986602 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B84AB8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 48, Time 986621 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B84AB8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 48, Time 986758 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B84AB8

Thread 0, Frame 48, Time 986771 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 48, Time 986787 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B84AB8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 48, Time 986872 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 48, Time 986894 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 48, Time 1002513 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 49, Time 1003101 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 49, Time 1003127 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 49, Time 1003156 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 49, Time 1003171 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 49, Time 1003235 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B879B8

Thread 0, Frame 49, Time 1003282 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B879B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 49, Time 1003302 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B879B8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 49, Time 1003366 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B879B8

Thread 0, Frame 49, Time 1003379 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 49, Time 1003395 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B879B8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 49, Time 1003482 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 49, Time 1003502 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 49, Time 1019148 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 50, Time 1019567 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 50, Time 1019593 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 50, Time 1019622 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 50, Time 1019638 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 50, Time 1019711 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B91C58

Thread 0, Frame 50, Time 1019751 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B91C58
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 50, Time 1019771 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B91C58
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 50, Time 1019836 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B91C58

Thread 0, Frame 50, Time 1019850 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 50, Time 1019868 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B91C58
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 50, Time 1019965 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 50, Time 1019985 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 50, Time 1035843 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 51, Time 1036397 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 51, Time 1036423 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 51, Time 1036458 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 51, Time 1036474 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 51, Time 1036541 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B92238

Thread 0, Frame 51, Time 1036590 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B92238
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 51, Time 1036610 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B92238
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 51, Time 1036680 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B92238

Thread 0, Frame 51, Time 1036693 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 51, Time 1036709 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B92238
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 51, Time 1036791 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 51, Time 1036810 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 51, Time 1053021 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 52, Time 1055482 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 52, Time 1055653 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 52, Time 1055861 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 52, Time 1056045 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 52, Time 1056427 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B91098

Thread 0, Frame 52, Time 1056645 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B91098
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 52, Time 1056742 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B91098
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 52, Time 1057035 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B91098

Thread 0, Frame 52, Time 1057108 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 52, Time 1057186 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B91098
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 52, Time 1057562 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 52, Time 1057653 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 52, Time 1069719 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 53, Time 1071994 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 53, Time 1072166 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 53, Time 1072712 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 53, Time 1072812 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 53, Time 1073036 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B90DA8

Thread 0, Frame 53, Time 1073234 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B90DA8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 53, Time 1073343 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B90DA8
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 53, Time 1073632 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B90DA8

Thread 0, Frame 53, Time 1073697 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 53, Time 1073775 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B90DA8
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 53, Time 1074146 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 53, Time 1074255 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 53, Time 1086327 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 54, Time 1089129 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 54, Time 1089267 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 54, Time 1089402 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 54, Time 1089484 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 54, Time 1089702 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34B92528

Thread 0, Frame 54, Time 1089892 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B92528
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 54, Time 1089999 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34B92528
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 54, Time 1090272 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34B92528

Thread 0, Frame 54, Time 1090336 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 54, Time 1090412 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34B92528
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 54, Time 1090791 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 54, Time 1090891 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 54, Time 1102987 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 55, Time 1103513 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 55, Time 1103648 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 55, Time 1103779 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 55, Time 1103860 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 55, Time 1104118 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34BA8048

Thread 0, Frame 55, Time 1104405 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8048
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 55, Time 1104502 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8048
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 55, Time 1104777 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8048

Thread 0, Frame 55, Time 1104997 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 55, Time 1105078 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34BA8048
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 55, Time 1105437 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 55, Time 1105529 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 55, Time 1119710 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 56, Time 1121831 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 56, Time 1121969 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 56, Time 1122186 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 56, Time 1122277 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 56, Time 1122508 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34BA8628

Thread 0, Frame 56, Time 1122668 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8628
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 56, Time 1122761 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8628
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F443490000000006
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 56, Time 1123045 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8628

Thread 0, Frame 56, Time 1123118 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 56, Time 1123289 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34BA8628
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 56, Time 1123755 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 56, Time 1123846 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 56, Time 1136334 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 57, Time 1136876 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 57, Time 1137022 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 57, Time 1137169 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 57, Time 1137251 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 57, Time 1137486 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34BA8338

Thread 0, Frame 57, Time 1137653 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8338
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 57, Time 1137750 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8338
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = F56C9B0000000004
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 57, Time 1138055 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA8338

Thread 0, Frame 57, Time 1138131 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 57, Time 1138209 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34BA8338
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 57, Time 1138559 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 57, Time 1138650 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 57, Time 1153032 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 58, Time 1240543 us:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 58, Time 1240588 us:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 00007FF676FF6020
        pFences[0]:                     const VkFence = EC4BEC000000000B

Thread 0, Frame 58, Time 1240621 us:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = E88693000000000C
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 58, Time 1240639 us:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 58, Time 1240714 us:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000334CFFF830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = CFEF35000000000A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000334CFFF828
        pCommandBuffers[0]:             VkCommandBuffer = 000001FF34BA7198

Thread 0, Frame 58, Time 1240753 us:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA7198
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000334CFFF800:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 58, Time 1240779 us:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001FF34BA7198
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000334CFFF7B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000334CFFF7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 128 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = E7F79A0000000005
            subresourceRange:               VkImageSubresourceRange = 000000334CFFF7E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 58, Time 1240851 us:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001FF34BA7198

Thread 0, Frame 58, Time 1240865 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 58, Time 1240883 us:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000334CFFF710
        pSubmits[0]:                    const VkSubmitInfo = 000000334CFFF710:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000334CFFF828
                pCommandBuffers[0]:             const VkCommandBuffer = 000001FF34BA7198
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = EC4BEC000000000B

Thread 0, Frame 58, Time 1240981 us:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001FF31E05180
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pSupported:                     VkBool32* = 1

Thread 0, Frame 58, Time 1241003 us:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001FF34451DC8

Thread 0, Frame 58, Time 1241333 us:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001FF34451DC8
    pPresentInfo:                   const VkPresentInfoKHR* = 000000334CFFF760:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 00007FF676FF6028
            pWaitSemaphores[0]:             const VkSemaphore = E88693000000000C
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000334CFFF7A8
            pSwapchains[0]:                 const VkSwapchainKHR = FA21A40000000003
        pImageIndices:                  const uint32_t* = 000000334CFFF85C
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 59, Time 1241456 us:
vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001FF3229E7D8

Thread 0, Frame 59, Time 1241484 us:
vkDestroyImage(device, image, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    image:                          VkImage = CAD092000000000D
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241689 us:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    imageView:                      VkImageView = CB3EE80000000007
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241713 us:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    imageView:                      VkImageView = EAD9370000000008
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241726 us:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    imageView:                      VkImageView = EE647E0000000009
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241739 us:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    semaphore:                      VkSemaphore = E88693000000000C
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241766 us:
vkDestroyFence(device, fence, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    fence:                          VkFence = EC4BEC000000000B
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1241786 us:
vkDestroyCommandPool(device, commandPool, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    commandPool:                    VkCommandPool = CFEF35000000000A
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1242005 us:
vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    swapchain:                      VkSwapchainKHR = FA21A40000000003
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1242745 us:
vkDestroySurfaceKHR(instance, surface, pAllocator) returns void:
    instance:                       VkInstance = 000001FF314C0620
    surface:                        VkSurfaceKHR = FAB64D0000000002
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1247304 us:
vkFreeMemory(device, memory, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    memory:                         VkDeviceMemory = 967DD1000000000E
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1247735 us:
vkDestroyDevice(device, pAllocator) returns void:
    device:                         VkDevice = 000001FF3229E7D8
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1265966 us:
vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator) returns void:
    instance:                       VkInstance = 000001FF314C0620
    messenger:                      VkDebugUtilsMessengerEXT = FD5B260000000001
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 59, Time 1266000 us:
vkDestroyInstance(instance, pAllocator) returns void:
    instance:                       VkInstance = 000001FF314C0620
    pAllocator:                     const VkAllocationCallbacks* = NULL

